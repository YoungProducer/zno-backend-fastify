"use strict";
/**
 * Created by: Oleksandr Bezrukov
 * Creation date: 9 March 2020
 *
 * Service which handles auth controller.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const http_errors_1 = __importDefault(require("http-errors"));
const lodash_1 = __importDefault(require("lodash"));
const prisma_client_1 = require("../../prisma/generated/prisma-client");
class AuthService {
    constructor(fastify) {
        this.instance = fastify;
    }
    async refresh(req) {
        /** Extract refresh token from cookies */
        const refreshToken = req.cookies['refreshToken'];
        if (!refreshToken) {
            throw new http_errors_1.default.Unauthorized('Токен відсутній.');
        }
        const userProfile = await this.instance.refreshService.verifyToken(refreshToken);
        const newAccessToken = await this.instance.accessService.generateToken(lodash_1.default.omit(userProfile, 'hash'));
        const newRefreshToken = await this.instance.refreshService.generateToken(userProfile);
        return {
            accessToken: newAccessToken,
            refreshToken: newRefreshToken,
            userProfile: lodash_1.default.omit(userProfile, 'hash'),
        };
    }
    async logout(req) {
        /** Extract refresh token from cookies */
        const refreshToken = req.cookies['refreshToken'];
        /** Verify token */
        const userProfile = await this.instance.refreshService.verifyToken(refreshToken);
        await prisma_client_1.prisma.deleteToken({
            loginId: userProfile.hash,
        });
    }
}
module.exports = AuthService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hdXRoL3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7O0FBS0gsOERBQXFDO0FBQ3JDLG9EQUF1QjtBQUt2Qix3RUFBOEQ7QUFFOUQsTUFBTSxXQUFXO0lBR2IsWUFBWSxPQUF3QjtRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFvQztRQUM5Qyx5Q0FBeUM7UUFDekMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2YsTUFBTSxJQUFJLHFCQUFVLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDekQ7UUFFRCxNQUFNLFdBQVcsR0FBZ0IsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUYsTUFBTSxjQUFjLEdBQVcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsZ0JBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFNUcsTUFBTSxlQUFlLEdBQVcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFOUYsT0FBTztZQUNILFdBQVcsRUFBRSxjQUFjO1lBQzNCLFlBQVksRUFBRSxlQUFlO1lBQzdCLFdBQVcsRUFBRSxnQkFBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDO1NBQzNDLENBQUM7SUFDTixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFvQztRQUM3Qyx5Q0FBeUM7UUFDekMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVqRCxtQkFBbUI7UUFDbkIsTUFBTSxXQUFXLEdBQWdCLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTlGLE1BQU0sc0JBQU0sQ0FBQyxXQUFXLENBQUM7WUFDckIsT0FBTyxFQUFFLFdBQVcsQ0FBQyxJQUFJO1NBQzVCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQUVELGlCQUFTLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieTogT2xla3NhbmRyIEJlenJ1a292XG4gKiBDcmVhdGlvbiBkYXRlOiA5IE1hcmNoIDIwMjBcbiAqXG4gKiBTZXJ2aWNlIHdoaWNoIGhhbmRsZXMgYXV0aCBjb250cm9sbGVyLlxuICovXG5cbi8qKiBFeHRlcm5hbCBpbXBvcnRzICovXG5pbXBvcnQgeyBGYXN0aWZ5SW5zdGFuY2UsIEZhc3RpZnlSZXF1ZXN0IH0gZnJvbSAnZmFzdGlmeSc7XG5pbXBvcnQgeyBJbmNvbWluZ01lc3NhZ2UgfSBmcm9tICdodHRwJztcbmltcG9ydCBIdHRwRXJyb3JzIGZyb20gJ2h0dHAtZXJyb3JzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbi8qKiBBcHBsaWNhdGlvbidzIGltcG9ydHMgKi9cbmltcG9ydCB7IFVzZXJQcm9maWxlIH0gZnJvbSAnLi4vc2VydmljZXMvdHlwZXMnO1xuaW1wb3J0IHsgSUF1dGhTZXJ2aWNlLCBJUmVmcmVzaFJldHVybkRhdGEgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4uLy4uL3ByaXNtYS9nZW5lcmF0ZWQvcHJpc21hLWNsaWVudCc7XG5cbmNsYXNzIEF1dGhTZXJ2aWNlIGltcGxlbWVudHMgSUF1dGhTZXJ2aWNlIHtcbiAgICBpbnN0YW5jZSE6IEZhc3RpZnlJbnN0YW5jZTtcblxuICAgIGNvbnN0cnVjdG9yKGZhc3RpZnk6IEZhc3RpZnlJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gZmFzdGlmeTtcbiAgICB9XG5cbiAgICBhc3luYyByZWZyZXNoKHJlcTogRmFzdGlmeVJlcXVlc3Q8SW5jb21pbmdNZXNzYWdlPik6IFByb21pc2U8SVJlZnJlc2hSZXR1cm5EYXRhPiB7XG4gICAgICAgIC8qKiBFeHRyYWN0IHJlZnJlc2ggdG9rZW4gZnJvbSBjb29raWVzICovXG4gICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IHJlcS5jb29raWVzWydyZWZyZXNoVG9rZW4nXTtcblxuICAgICAgICBpZiAoIXJlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcnMuVW5hdXRob3JpemVkKCfQotC+0LrQtdC9INCy0ZbQtNGB0YPRgtC90ZbQuS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXJQcm9maWxlOiBVc2VyUHJvZmlsZSA9IGF3YWl0IHRoaXMuaW5zdGFuY2UucmVmcmVzaFNlcnZpY2UudmVyaWZ5VG9rZW4ocmVmcmVzaFRva2VuKTtcblxuICAgICAgICBjb25zdCBuZXdBY2Nlc3NUb2tlbjogc3RyaW5nID0gYXdhaXQgdGhpcy5pbnN0YW5jZS5hY2Nlc3NTZXJ2aWNlLmdlbmVyYXRlVG9rZW4oXy5vbWl0KHVzZXJQcm9maWxlLCAnaGFzaCcpKTtcblxuICAgICAgICBjb25zdCBuZXdSZWZyZXNoVG9rZW46IHN0cmluZyA9IGF3YWl0IHRoaXMuaW5zdGFuY2UucmVmcmVzaFNlcnZpY2UuZ2VuZXJhdGVUb2tlbih1c2VyUHJvZmlsZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBuZXdBY2Nlc3NUb2tlbixcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogbmV3UmVmcmVzaFRva2VuLFxuICAgICAgICAgICAgdXNlclByb2ZpbGU6IF8ub21pdCh1c2VyUHJvZmlsZSwgJ2hhc2gnKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2dvdXQocmVxOiBGYXN0aWZ5UmVxdWVzdDxJbmNvbWluZ01lc3NhZ2U+KSB7XG4gICAgICAgIC8qKiBFeHRyYWN0IHJlZnJlc2ggdG9rZW4gZnJvbSBjb29raWVzICovXG4gICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IHJlcS5jb29raWVzWydyZWZyZXNoVG9rZW4nXTtcblxuICAgICAgICAvKiogVmVyaWZ5IHRva2VuICovXG4gICAgICAgIGNvbnN0IHVzZXJQcm9maWxlOiBVc2VyUHJvZmlsZSA9IGF3YWl0IHRoaXMuaW5zdGFuY2UucmVmcmVzaFNlcnZpY2UudmVyaWZ5VG9rZW4ocmVmcmVzaFRva2VuKTtcblxuICAgICAgICBhd2FpdCBwcmlzbWEuZGVsZXRlVG9rZW4oe1xuICAgICAgICAgICAgbG9naW5JZDogdXNlclByb2ZpbGUuaGFzaCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgPSBBdXRoU2VydmljZTtcbiJdfQ==