"use strict";
/**
 * Created by: Oleksandr Bezrukov
 * Creation date: 8 March 2020
 *
 */
/** Application's imports */
const prisma_client_1 = require("../../prisma/generated/prisma-client");
const error_handler_1 = require("../services/error-handler");
const schema_1 = require("./schema");
async function signupHandler(fastify, req, reply) {
    const credentials = req.body;
    try {
        /** Validate credentials */
        await fastify.validatorService.validateSignUpCredentials(credentials);
        /** Hash password */
        credentials.password = await fastify.bcryptHasher.hashPassword(credentials.password);
        /** Get created user */
        const user = await prisma_client_1.prisma.createUser({
            ...credentials,
            role: 'DEFAULT_USER',
        });
        /** Delete password */
        delete user.password;
        return { ...user };
    }
    catch (err) {
        const error = error_handler_1.errorHandler(err);
        /** Set additional data to req body to prevent getting the 500 error */
        req.body.error = error.data;
        reply.send(err);
    }
}
async function signinHandler(fastify, req, reply) {
    /** Extract credentials */
    const credentials = req.body;
    try {
        const user = await fastify.userService.verifyCredentials(credentials);
        const userProfile = fastify.userService.convertToUserProfile(user);
        const accessToken = await fastify.accessService.generateToken(userProfile);
        const refreshToken = await fastify.refreshService.generateToken(userProfile);
        reply
            .setCookie('accessToken', accessToken, {
            maxAge: credentials.remember
                ? Number(fastify.config.JWT_ACCESS_COOKIES_MAX_AGE)
                : undefined,
            httpOnly: true,
            path: '/',
        })
            .setCookie('refreshToken', refreshToken, {
            maxAge: credentials.remember
                ? Number(fastify.config.JWT_REFRESH_COOKIES_MAX_AGE)
                : undefined,
            httpOnly: true,
            path: '/',
        })
            .send(user);
    }
    catch (err) {
        const error = error_handler_1.errorHandler(err);
        /** Set additional data to req body to prevent getting the 500 error */
        req.body.error = error.data;
        reply.send(err);
    }
}
async function meHandler(req, reply) {
    try {
        const user = req.params.userProfile;
        return { ...user };
    }
    catch (err) {
        const error = error_handler_1.errorHandler(err);
        reply.send({ ...error });
    }
}
async function refreshHandler(fastify, req, reply) {
    try {
        const { accessToken, refreshToken, userProfile } = await fastify.authService.refresh(req);
        reply
            .setCookie('accessToken', accessToken, {
            maxAge: Number(fastify.config.JWT_ACCESS_COOKIES_MAX_AGE),
            httpOnly: true,
            path: '/',
        })
            .setCookie('refreshToken', refreshToken, {
            maxAge: Number(fastify.config.JWT_REFRESH_COOKIES_MAX_AGE),
            httpOnly: true,
            path: '/',
        })
            .send(userProfile);
    }
    catch (err) {
        reply.send(err);
    }
}
async function logoutHandler(fastify, req, reply) {
    try {
        await fastify.authService.logout(req);
        reply
            .clearCookie('accessToken', {
            httpOnly: true,
            path: '/',
        })
            .clearCookie('refreshToken', {
            httpOnly: true,
            path: '/',
        })
            .code(200)
            .send('Success');
    }
    catch (err) {
        reply.send(err);
    }
}
module.exports = async function (fastify, opts) {
    fastify.post('/signup', { schema: schema_1.signup }, async (req, reply) => await signupHandler(fastify, req, reply));
    fastify.post('/signin', { schema: schema_1.signin }, async (req, reply) => await signinHandler(fastify, req, reply));
    fastify.get('/refresh', async (req, reply) => await refreshHandler(fastify, req, reply));
    fastify.post('/logout', async (req, reply) => await logoutHandler(fastify, req, reply));
    fastify.register(async (fastify) => {
        fastify.addHook('preHandler', async (req, reply) => {
            await fastify.authPreHandler(req, reply);
            return;
        });
        fastify.get('/me', { schema: schema_1.me }, meHandler);
    });
};
//# sourceMappingURL=data:application/json;base64,